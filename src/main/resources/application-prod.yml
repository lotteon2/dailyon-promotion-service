spring:
  config:
    activate:
      on-profile: prod
    import: optional:configserver:http://config-service:8888

  # redis setting
  redis:
    cluster:
      nodes: redis-cluster-0.redis-cluster.prod.svc.cluster.local:6379,redis-cluster-1.redis-cluster.prod.svc.cluster.local:6379,redis-cluster-2.redis-cluster.prod.svc.cluster.local:6379,redis-cluster-3.redis-cluster.prod.svc.cluster.local:6379,redis-cluster-4.redis-cluster.prod.svc.cluster.local:6379,redis-cluster-5.redis-cluster.prod.svc.cluster.local:6379
      max-redirects: 3
    password:

  # rabbitmq settings
  rabbitmq:
    host: rabbitmq-service
    port: 5672
    username: guest
    password: guest
  # DB settings
  # dynamoDB 설정 추가 필요
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://promotion-db-service:3306/promotion-service
    username: root
    password: 11111111
  # AWS DynamoDB settings 어떻게 될지 정해지지않아서 이렇게 두었음.
  data:
    dynamodb:
      endpoint: https://dynamodb.us-west-2.amazonaws.com # Use appropriate AWS Region
      region: us-west-2 # Use appropriate AWS Region
      access-key: access-key # if not using environment variables or IAM
      secret-key: secret-key # if not using environment variables or IAM

  kafka:
    producer:
      bootstrap-servers: kafka-service:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # Leader Broker가 메시지를 받았는지 확인 신호 요청
      acks: 1
    consumer:
      bootstrap-servers: kafka-service:9092
      # 컨슈머 그룹 지정 - 컨슈머 그룹안의 하나의 컨슈머가 다운되더라도 컨슈머 그룹 안의 다른 컨슈머가 읽을 수 있도록 함 또한 Offset으로 재시작시 메시지 관리 가능
      group-id: promotion-service
      # Kafka consumer가 다운되었을 때 가장 빠른 컨슈머 오프셋을 가지는 것 부터 읽는다.
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      ack-mode: manual

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://discovery-service:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${server.port}
    # 기본적으로 유레카는 '호스트 이름'으로 접속하는 서비스를 레지스트리에 등록 -> 로컬(localhost)
    # 따라서 쿠버네티스, 도커와 같이 임의의 호스트 이름을 가지는 경우는 false로 하면 클라이언트를 인식하지 못한다.
    prefer-ip-address: true

logging:
  level:
    org:
      apache.kafka: ERROR
      kafka: ERROR
      apache.zookeeper: ERROR
